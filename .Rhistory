summary(small_pca)
preProcess(small[,-13], thresh=0.8)
preProcess(small[,-13], method="pca"m thresh=0.8)
preProcess(small[,-13], method="pca", thresh=0.8)
small_pca <- preProcess(small[,-13], method="pca", thresh=0.8)
small_pca
small_pca.names
small_pca$names
small
fit <- train(diagnosis~., data=small, method="glm", preProcess="pca", trControl=trainControl(preProcOptions = list(thresh=0.8)))
fit
predict(fit, newdata=testing)
confusionMatrix(testing$diagnosis, predict(fit, newdata=testing))
ozone
data(ozone)
library(ElemStatLearn)
data(ozone, package="ElemStatLearn")
ozone <- ozone[order(order$ozone),]
ozone <- ozone[order(ozone$ozone),]
ozone
length(ozone)
length(ozone)
length(ozone)[1]
length(ozone)[2]
dim(ozone)
ll M<- matrix(NA, nrow=10, ncol=155)
ll <- matrix(NA, nrow=10, ncol=155)
ll
ll
ss <- sample(1:dim(ozone)[1], replace=T)
ss
ozone0 <- ozone[ss,]
ozone0
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
loess0
?loess
predict(loess0, newdata=data.frame(ozone=1:155))
ozone=1:155
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
?CreatePartition
?createDataPartition
createDataPartition(y=segmentationOriginal$Case, p=0.7)
set.seed(125)
training <- createDataPartition(y=segmentationOriginal$Case, p=0.7)
train <- segmentationOriginal[training,]
train <- segmentationOriginal[training, ]
training <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
train <- segmentationOriginal[training, ]
test <- segmentationOriginal[-training, ]
train(Case ~ ., data=training, method="rpart", )
train(Case ~ ., data=train, method="rpart", )
modelFit <- train(Case~., data=train, method="rpart")
View(train)
View(train)
View(segmentationOriginal)
test_data <- data.frame(TotalIntench=23000, FiberWidthCh1 =10, PerimStatusCh1=2)
test_data
predict(modelFit, newdata=test_data)
result <- predict(modelFit, newdata= test)
result
table(result, test$Class)
data(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
train <- subset(segmentationOriginal, Case="Train")
train
View(segmentationOriginal)
View(train)
View(train)
train <- subset(segmentationOriginal, Case=="Train")
View(train)
View(train)
set.seed(125)
fitModel <- train(Class~., data=train, method="rpart")
print(fitModel$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
View(olive)
View(olive)
View(olive)
View(olive)
fitModel <- train(Area~., method="rpart", data=olive)
predict(fitModel, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(8484)
set.seed(13234)
View(trainSA)
View(trainSA)
fitModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
result <- predict(fitModel, newdata=testSA)
table(result, testSA$chd)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(result,testSA$chd)
fitModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
fitModel
predict(fitModel, newdata=testSA)
fitModel
missClass(predict(fitModel, newdata=testSA), testSA$chd)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
modelFit <- train(chd~age+alcohol+obesity+typea+ldl+tobacco, data=trainSA, method="glm", family=binomial)
modelFit
?predict
missClass(testSA, predict(modelFit, newdata = testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(modelFit, newdata = testSA))
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata=trainSA))
set.seed(13234)
modelFit <- train(chd~age + alcohol + obesity+typea+ldl+tobacco, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(modelFit, trainSA)
)
missClass(testSA$chd, predict(modelFit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
View(vowel.train)
View(vowel.train)
summary(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
summary(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitModel <- train(y~., data=vowel.train, method="rf")
rfNews()
fitModel
?varlmp
??varlmp
varImp(fitModel)
fitModel <- train(y~., data=vowel.train, method="rf")
varImp(fitModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fitModel <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(fitModel)
varImp(fitModel)
fitModel
varImp(fitModel)
randomForest(y~., data=vowel.train)
fit <- randomForest(y~., data=vowel.train)
varImp(fit)
varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
library(caret)
fit <- randomForest(y~., data=vowel.train)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
varImp.train(model)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
ibrary(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
a
setwd("~/Google Drive/JobApplication/DataScicentist/courses/08_PracticalMachineLearning/writeUp")
library(caret)
# "classe" is the target variable
data <- read.csv("pml-training.csv")
factor_names <- names(data)
observations <- nrow(data)
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA and Null data points
for (i in seq(1:160)) {
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
my_vars <- factor_names %in% noise
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
data <- read.csv("pml-training.csv", na.strings="")
data <- read.csv("pml-training.csv", na.strings="")
View(data)
View(data)
for i in seq(1:19622){
for j in seq(1:160){
if (data[i][j] == "")
data[i][j] <- NA
}
}
for i in seq(1:19622){
for j in seq(1:160){
if (data[i][j] == ""){
data[i][j] <- NA
}
}
}
for i in seq(1:19622){
for j in seq(1:160){
print(i)
#if (data[i][j] == ""){
#    data[i][j] <- NA
#}
}
}
for (i in seq(1:19622)){
for (j in seq(1:160)){
print(i)
if (data[i][j] == ""){
data[i][j] <- NA
}
}
}
data[1][1]
data[1]
data[2]
data[2][1]
data[2][1][1]
data[2,1]
data[1,1]
data[1,2]
data[1,3]
for (i in seq(1:19622)){
for (j in seq(1:160)){
print(i)
if (data[i,j]==""){
data[i,j] <- NA
}
}
}
data <- read.csv("pml-training.csv", na.strings="")
View(data)
View(data)
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA and Null data points
for (i in seq(1:160)) {
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
#null_column <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
my_vars <- factor_names %in% noise
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
tail(clean_data)
data <- read.csv("pml-training.csv")
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA data points
for (i in seq(1:160)){
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
#null_column <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
my_vars <- factor_names %in% noise
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
noise
null_column <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
noises <- c(noise, null_column)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
noises <- c(noise, null_part1, null_part2)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
noises <- c(noise, null_part1, null_part2, null_part3)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt", "max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
null_part4 <- c("kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm", "skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_yaw_forearm", "min_yaw_forearm", "amplitude_yaw_forearm")
noises <- c(noise, null_part1, null_part2, null_part3, null_part4)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
data <- read.csv("pml-training.csv")
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA data points
for (i in seq(1:160)){
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt",
"skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm",
"skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell",
"kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell",
"skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
null_part4 <- c("kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm",
"max_yaw_forearm", "min_yaw_forearm", "amplitude_yaw_forearm")
noises <- c(noise, null_part1, null_part2, null_part3, null_part4)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
fitModel <- train(class~., data=training, method="glm")
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
fitModel <- train(class~., data=training, method="glm")
correlation <- cor(train[,-60])
correlation <- cor(training[,-60])
fitModel <- train(class~., data=training, method="glm")
View(training)
View(training)
data <- read.csv("pml-training.csv")
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA data points
for (i in seq(1:160)){
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt",
"skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm",
"skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell",
"kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell",
"skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
null_part4 <- c("kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm",
"max_yaw_forearm", "min_yaw_forearm", "amplitude_yaw_forearm")
noises <- c(noise, null_part1, null_part2, null_part3, null_part4)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
# Training part
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
View(training)
View(training)
fitModel <- train(classe~., data=training, method="glm")
warnings()
M <- abs(cor(training[,-60]))
clean_data$new_window <- as.numeric(clean_data$new_window)
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
M <- abs(cor(training[,-60]))
M <- abs(cor(training[,c(8:59)]))
M
diag(M) <- 0
which(M > 0.8,arr.ind=T)
data(mtcars)
mtcars
boxplot(mpg~am, mtcars, xlab="Transmission (0 = automatic, 1 = manual)", ylab="Miles/(US) gallon")
hist(mtcars$mpg)
?hist
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
d <- density(mtcars$mpg) # returns the density data
plot(d) # plots the results
d <- density(mtcars$mpg) # returns the density data
plot(d) # plots the results
title(main="MPG Distribution by Car Cylinders")
d
mpg_density <- density(mtcars$mpg)
plot(mpg_density, main="MPG Distribution")
?lm
View(mtcars)
View(mtcars)
lm(mpg~., data=mtcars)
fit <- lm(mpg~., data=mtcars)
boxplot(mpg~cyl, mtcars)
boxplot(mpg~cyl, disp)
boxplot(mpg~mtcars, mtcars)
boxplot(mpg~disp, mtcars)
View(mtcars)
View(mtcars)
boxplot(mpg~drat, mtcars)
boxplot(mpg~gear, mtcars)
boxplot(mpg~vs, mtcars)
boxplot(mpg~wt, mtcars)
predict_val <- predict(fit, mtcars)
predict_val <- abs(mtcars$mpg - predict(fit, mtcars))
e <- resid(fit)
e
summary(e)
predict_val <- abs(mtcars$mpg - predict(fit, mtcars))
x <- seq(1:32)
plot(x, predict_val)
predict_val
diff <- mtcars$mpg - predict(fit, mtcars)
x <- seq(1:32)
plot(x, diff)
abline(h=0)
plot(x, diff, xlab="Observations", ylab="Residuals", main="MPG Prediction error")
plot(x, diff, xlab="Observations", ylab="Residuals", main="MPG Prediction error")
abline(h=0)
predict_valfit
fit
boxplot(mpg~cyl, mtcars)
View(mtcars)
View(mtcars)
fit
e <- resid(fit)
e
sum(e)
diff <- mtcars$mpg - predict(fit, mtcars)
sum(diff)
?resid
yhat <- predict(fit)
yhat
e <- resid(fit)
y_est <- predict(fit)
y <- mtcars$mpg
max(abs(e -(y - y_est)))
fit <- lm(mpg~wt+vs, data=mtcars)
fit
error <- mtcars$mpg - predict(fit1)
fit1 <- lm(mpg~wt+am, data=mtcars)
print(fit1)
error <- mtcars$mpg - predict(fit1)
sum(error)
fit2 <- lm(mpg~., data=mtcars)
error2 <- mtcars$mpg - predict(fit2)
error2
sum(error2)
sum(error)
fit2
sumCoef <- summary(fit2)$coefficients
sumCoef
