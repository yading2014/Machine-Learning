1100 + c(-1,1)*pt(0.95,8,lower.tail=FALSE)*(30/3)
1100 + c(-1,1)*pt(0.95,8, lower.tail=TRUE)*(30/3)
1100 + c(-1,1)*pt(c(0.05,0.95),8, lower.tail=TRUE)*(30/3)
1100 + pt(c(0.05,0.95),8, lower.tail=TRUE)*(30/3)
pt(0.975, 8, lower.tail=TRUE)
pt(0.975, 8, lower.tail=TRUE)*10
pt(0.975, 8, lower.tail=TRUE)*10
pt(0.95, 8, lower.tail=TRUE)*10
pt(0.9, 8, lower.tail=TRUE)*10
pt(0.025, 8, lower.tail=TRUE)*10
pt(0.05, 8, lower.tail=TRUE)*10
pt(0.80, 8, lower.tail=TRUE)*10
pt(0.975, 8)
pt(0.975, 8)
pt(0.975, 8)*10
pt(0.975, 8)*30
pt(0.975, 4)
pt(0.025, 4)
qt(0.025, 8, lower.tail=TRUE)*10
?binom.test
binom.test(3,4,9=0.5)
binom.test(3,4,p=0.5)
binom.test(3,4,p=0.5, alternative="l")
binom.test(3,4,p=0.5, alternative="g")
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
install.packages("caret")
library(caret)
data(Wage)
summary(Wage)
View(Wage)
View(Wage)
inTrain <- createDataPartition(y=Wage$wage, p =0.7, list=FALSE)
inTrain
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featureplot(x=training,[, c("age, education, jobclass")], y= training$wage, plot="pairs")
featurePlot(x = training[, c("age, education, jobclass")], y=training$wage, plot="pairs")
featurePlot(x = training[, c("age", "education", "jobclass")], y=training$wage, plot="pairs")
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
View(predictors)
diagnosis
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
library(Hmisc)
?cut2
a <- seq(1:1030)
a
plot(a, mixtures$CompressiveStrength)
plot(a, mixtures$CompressiveStrength, color=mixtures$Age)
qplot(a, mixtures$CompressiveStrength, color=mixtures$Age)
qplot(a, mixtures$CompressiveStrength, color=mixtures$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
?cut2
?plotFeatures
?featurePlot
View(concrete)
featurePlot(x=training[c("Cement")], y=training[c("CompresiveStrength")],plot="pairs")
featurePlot(x=training[, c("Cement")], y=training$CompresiveStrength,plot="pairs")
featurePlot(x=training[, c("Cement")], y=training$CompresiveStrength,plot="pairs")
x=training[, c("Cement")]
x
featurePlot(x=training[, c("Cement","FlyAsh")], y=training$CompresiveStrength,plot="pairs")
x <- seq(1:1030)
x
index <- seq(1:1030)
qplot(index, CompresiveStrength, data=training)
qplot(index, CompressiveStrength, data=training)
qplot(FlyAsh, CompressiveStrength, data=training)
qplot(Cement, CompressiveStrength, data=training)
qplot(Age, CompressiveStrength, data=training)
names <- colnames(concrete)
names
names <- names[-length(names)]
names
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
index
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength))
?ggplot
?aes
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
ggplot(data = training, aes(x = index, y = CompressiveStrength), color=Age) + geom_point()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
View(training)
plot(index, training$CompressiveStrength)
plot(index, training$CompressiveStrength, color=training$Age)
qplot(index, training$CompressiveStrength, colour=training$Age)
qplot(index, training$CompressiveStrength, colour=training$FlyAsh)
qplot(index, training$CompressiveStrength, colour=training$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
View(testing)
names(testing)
"IL_" in names(testing)
"IL_"in names(testing)
"IL_" %in% names(testing)
focus <- names(testing) %in% "IL_"
focus
testing[, grep("^IL_", names(testing), value=TRUE)]
?preProcess
small <- testing[, grep("^IL_", names(testing), value=TRUE)]
small
small <- training[, grep("^IL_", names(training), value=TRUE)]
preProcess(small, method="pca")
preProcess(small, method="pca", pcaComp=8)
preProcess(small, method="pca", thresh=0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
small <- training[, grep("^IL_", names(training), value=TRUE)]
small
View(training)
View(training)
View(small)
View(small)
View(training)
View(training)
View(testing)
View(testing)
View(training)
View(training)
small <- training[, grep("^IL_", names(training), value=TRUE)]
cbind(small, testing$diagnosis)
cbind( testing$diagnosis, small)
?cbind
small$diagnosis <- training$diagnosis
small
View(small)
View(small)
train(small$diagnosis~., method="glm")
train(diagnosis~., method="glm", data=small)
train(diagnosis~., method="glm", data=small)
a <- train(diagnosis~., method="glm", data=small)
install.packages('e1071', dependencies=TRUE)
a <- train(diagnosis~., method="glm", data=small)
a
b <- predict(a, data=testing)
?predict
b <- predict(a, data=testing)
b <- predict(a, newdata=testing)
b
table(b, testing$diagnosis)
53/(53+29)
a <- train(diagnosis~., method="glm", data=small, preProcess="pca", thresh=0.8)
fit <- train(diagnosis~., method="glm", data=small, preProcess="pca")
result <- predict(fit, newdata=testing)
table(testing$diagnosis, result)
fit <- train(diagnosis~., method="glm", data=small, preProcess="pca", thresh=0.8)
warnings()
?preProcess
small_pca <- preProcess(small, thresh=0.8)
View(small)
View(small)
small[,-13]
small_pca <- preProcess(small[,-13], thresh=0.8)
small_pca
summary(small_pca)
preProcess(small[,-13], thresh=0.8)
preProcess(small[,-13], method="pca"m thresh=0.8)
preProcess(small[,-13], method="pca", thresh=0.8)
small_pca <- preProcess(small[,-13], method="pca", thresh=0.8)
small_pca
small_pca.names
small_pca$names
small
fit <- train(diagnosis~., data=small, method="glm", preProcess="pca", trControl=trainControl(preProcOptions = list(thresh=0.8)))
fit
predict(fit, newdata=testing)
confusionMatrix(testing$diagnosis, predict(fit, newdata=testing))
ozone
data(ozone)
library(ElemStatLearn)
data(ozone, package="ElemStatLearn")
ozone <- ozone[order(order$ozone),]
ozone <- ozone[order(ozone$ozone),]
ozone
length(ozone)
length(ozone)
length(ozone)[1]
length(ozone)[2]
dim(ozone)
ll M<- matrix(NA, nrow=10, ncol=155)
ll <- matrix(NA, nrow=10, ncol=155)
ll
ll
ss <- sample(1:dim(ozone)[1], replace=T)
ss
ozone0 <- ozone[ss,]
ozone0
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
loess0
?loess
predict(loess0, newdata=data.frame(ozone=1:155))
ozone=1:155
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
?CreatePartition
?createDataPartition
createDataPartition(y=segmentationOriginal$Case, p=0.7)
set.seed(125)
training <- createDataPartition(y=segmentationOriginal$Case, p=0.7)
train <- segmentationOriginal[training,]
train <- segmentationOriginal[training, ]
training <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
train <- segmentationOriginal[training, ]
test <- segmentationOriginal[-training, ]
train(Case ~ ., data=training, method="rpart", )
train(Case ~ ., data=train, method="rpart", )
modelFit <- train(Case~., data=train, method="rpart")
View(train)
View(train)
View(segmentationOriginal)
test_data <- data.frame(TotalIntench=23000, FiberWidthCh1 =10, PerimStatusCh1=2)
test_data
predict(modelFit, newdata=test_data)
result <- predict(modelFit, newdata= test)
result
table(result, test$Class)
data(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
train <- subset(segmentationOriginal, Case="Train")
train
View(segmentationOriginal)
View(train)
View(train)
train <- subset(segmentationOriginal, Case=="Train")
View(train)
View(train)
set.seed(125)
fitModel <- train(Class~., data=train, method="rpart")
print(fitModel$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
View(olive)
View(olive)
View(olive)
View(olive)
fitModel <- train(Area~., method="rpart", data=olive)
predict(fitModel, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(8484)
set.seed(13234)
View(trainSA)
View(trainSA)
fitModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
result <- predict(fitModel, newdata=testSA)
table(result, testSA$chd)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(result,testSA$chd)
fitModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
fitModel
predict(fitModel, newdata=testSA)
fitModel
missClass(predict(fitModel, newdata=testSA), testSA$chd)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
modelFit <- train(chd~age+alcohol+obesity+typea+ldl+tobacco, data=trainSA, method="glm", family=binomial)
modelFit
?predict
missClass(testSA, predict(modelFit, newdata = testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(modelFit, newdata = testSA))
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata=trainSA))
set.seed(13234)
modelFit <- train(chd~age + alcohol + obesity+typea+ldl+tobacco, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(modelFit, trainSA)
)
missClass(testSA$chd, predict(modelFit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
View(vowel.train)
View(vowel.train)
summary(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
summary(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitModel <- train(y~., data=vowel.train, method="rf")
rfNews()
fitModel
?varlmp
??varlmp
varImp(fitModel)
fitModel <- train(y~., data=vowel.train, method="rf")
varImp(fitModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fitModel <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(fitModel)
varImp(fitModel)
fitModel
varImp(fitModel)
randomForest(y~., data=vowel.train)
fit <- randomForest(y~., data=vowel.train)
varImp(fit)
varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fit <- randomForest(y~., data=vowel.train)
library(caret)
fit <- randomForest(y~., data=vowel.train)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
varImp.train(model)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
ibrary(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
a
setwd("~/Google Drive/JobApplication/DataScicentist/courses/08_PracticalMachineLearning/writeUp")
library(caret)
# "classe" is the target variable
data <- read.csv("pml-training.csv")
factor_names <- names(data)
observations <- nrow(data)
noise <- vector()
count <- 1
# remove NA data points
for (i in seq(1:160)){
na_number <- sum(is.na(data[factor_names[i]]))
if (na_number > observations/2 ){
noise[count] <- factor_names[i]
count <- count + 1
print(factor_names[i])
}
}
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt",
"skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm",
"skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell",
"kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell",
"skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
null_part4 <- c("kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm",
"max_yaw_forearm", "min_yaw_forearm", "amplitude_yaw_forearm")
noises <- c(noise, null_part1, null_part2, null_part3, null_part4)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
clean_data$new_window <- as.numeric(clean_data$new_window)
View(clean_data)
View(clean_data)
clean_data$classe
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
fitModel <- train(classe~., data=training, method="glm")
result <- predict(fitModel, newdata=testing)
fitModel
FeaturePlot
featurePlot
?featurePlot
featurePlot(x=training[, c("roll_belt", "pitch_belt", "myaw_belt")], y=training$classe, plot="pairs")
featurePlot(x=training[, c("roll_belt", "pitch_belt", "yaw_belt")], y=training$classe, plot="pairs")
redundent <- c("raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
null_part1 <- c("kurtosis_roll_belt", "kurtosis_picth_belt", "kurtosis_yaw_belt",
"skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt")
null_part2 <- c("kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm",
"skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm")
null_part3 <- c("kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell",
"kurtosis_yaw_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell",
"skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell")
null_part4 <- c("kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm",
"max_yaw_forearm", "min_yaw_forearm", "amplitude_yaw_forearm")
noises <- c(noise, redundent, null_part1, null_part2, null_part3, null_part4)
my_vars <- factor_names %in% noises
clean_data <- data[!my_vars]
View(clean_data)
View(clean_data)
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
clean_data <- clean_data[, 3:55]
View(clean_data)
View(clean_data)
inTrain <- createDataPartition(y=clean_data$classe, p=0.7, list=FALSE)
training <- clean_data[inTrain, ]
testing <- clean_data[-inTrain, ]
fitModel <- train(classe~., data=training, method="glm")
warnings
warnings()
fit <- lm(classe~., data=training)
View(training)
View(training)
training[1]
unique(data$user_name)
modFit <- train(classe~., method="rpart", data=training)
modFit
predict(modFit,newdata=testing)
table(testing$classe, predict(modFit,newdata=testing))
knit2html("coursework.Rmd")
install.packages(knitr)
install.packages("knitr")
knit2html("coursework.Rmd")
install.packages("knit2html")
install.packages(c("agricolae", "Hmisc", "jsonlite", "R.utils", "reshape2", "rmarkdown"))
install.packages(c("agricolae", "Hmisc", "jsonlite", "R.utils",
)
)
install.packages("rmarkdown")
install.packages("rmarkdown")
result
result <- predict(fitModel, newdata=testing)
result <- predict(modFit, newdata=testing)
sum(result==testing$classe)
nrow(testing)
2874/5885
validation <- read.csv("pml-testing.csv")
View(validation)
View(validation)
validate <- predict(modFit, newdata=validation)
validate
